<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="262.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="245" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="245" > </text>
<g id="frames">
<g >
<title>__rust_alloc (17,410 samples, 0.22%)</title><rect x="567.3" y="181" width="2.6" height="15.0" fill="rgb(212,65,47)" rx="2" ry="2" />
<text  x="570.33" y="191.5" ></text>
</g>
<g >
<title>__rust_alloc (3,789 samples, 0.05%)</title><rect x="476.8" y="165" width="0.5" height="15.0" fill="rgb(244,109,11)" rx="2" ry="2" />
<text  x="479.76" y="175.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,759 samples, 0.02%)</title><rect x="457.2" y="133" width="0.3" height="15.0" fill="rgb(254,222,4)" rx="2" ry="2" />
<text  x="460.23" y="143.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1,294 samples, 0.02%)</title><rect x="457.6" y="69" width="0.2" height="15.0" fill="rgb(218,164,22)" rx="2" ry="2" />
<text  x="460.64" y="79.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (359,478 samples, 4.57%)</title><rect x="997.2" y="181" width="53.9" height="15.0" fill="rgb(221,146,6)" rx="2" ry="2" />
<text  x="1000.23" y="191.5" >hashb..</text>
</g>
<g >
<title>handle_fasteoi_irq (1,425 samples, 0.02%)</title><rect x="457.6" y="117" width="0.2" height="15.0" fill="rgb(232,124,30)" rx="2" ry="2" />
<text  x="460.63" y="127.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,774,703 samples, 35.26%)</title><rect x="41.9" y="181" width="416.1" height="15.0" fill="rgb(218,178,54)" rx="2" ry="2" />
<text  x="44.91" y="191.5" >&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::i..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (73,156 samples, 0.93%)</title><rect x="515.4" y="165" width="10.9" height="15.0" fill="rgb(251,223,11)" rx="2" ry="2" />
<text  x="518.36" y="175.5" ></text>
</g>
<g >
<title>i2c_dw_isr (1,065 samples, 0.01%)</title><rect x="457.6" y="53" width="0.2" height="15.0" fill="rgb(209,224,21)" rx="2" ry="2" />
<text  x="460.64" y="63.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2,506 samples, 0.03%)</title><rect x="457.2" y="165" width="0.4" height="15.0" fill="rgb(228,95,4)" rx="2" ry="2" />
<text  x="460.20" y="175.5" ></text>
</g>
<g >
<title>handle_irq_event (1,321 samples, 0.02%)</title><rect x="457.6" y="101" width="0.2" height="15.0" fill="rgb(247,119,48)" rx="2" ry="2" />
<text  x="460.63" y="111.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1,314 samples, 0.02%)</title><rect x="457.6" y="85" width="0.2" height="15.0" fill="rgb(206,27,23)" rx="2" ry="2" />
<text  x="460.64" y="95.5" ></text>
</g>
<g >
<title>handle_irq (1,571 samples, 0.02%)</title><rect x="457.6" y="133" width="0.2" height="15.0" fill="rgb(254,106,32)" rx="2" ry="2" />
<text  x="460.61" y="143.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (23,482 samples, 0.30%)</title><rect x="557.7" y="181" width="3.6" height="15.0" fill="rgb(208,51,33)" rx="2" ry="2" />
<text  x="560.74" y="191.5" ></text>
</g>
<g >
<title>__rdl_alloc (30,419 samples, 0.39%)</title><rect x="561.3" y="181" width="4.5" height="15.0" fill="rgb(205,129,9)" rx="2" ry="2" />
<text  x="564.27" y="191.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2,314 samples, 0.03%)</title><rect x="457.2" y="149" width="0.4" height="15.0" fill="rgb(247,161,54)" rx="2" ry="2" />
<text  x="460.23" y="159.5" ></text>
</g>
<g >
<title>computing_project::util::Polynomial::eval (958,008 samples, 12.18%)</title><rect x="793.1" y="181" width="143.6" height="15.0" fill="rgb(228,53,4)" rx="2" ry="2" />
<text  x="796.06" y="191.5" >computing_project:..</text>
</g>
<g >
<title>computing_project::ds_helper::fast_possible_periods (447,029 samples, 5.68%)</title><rect x="642.0" y="181" width="67.1" height="15.0" fill="rgb(215,223,41)" rx="2" ry="2" />
<text  x="645.05" y="191.5" >computi..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (56,730 samples, 0.72%)</title><rect x="478.3" y="165" width="8.5" height="15.0" fill="rgb(247,36,48)" rx="2" ry="2" />
<text  x="481.26" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (10,461 samples, 0.13%)</title><rect x="534.8" y="165" width="1.6" height="15.0" fill="rgb(243,27,49)" rx="2" ry="2" />
<text  x="537.79" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1,531 samples, 0.02%)</title><rect x="474.6" y="117" width="0.2" height="15.0" fill="rgb(205,83,24)" rx="2" ry="2" />
<text  x="477.56" y="127.5" ></text>
</g>
<g >
<title>update_process_times (955 samples, 0.01%)</title><rect x="457.3" y="69" width="0.2" height="15.0" fill="rgb(217,20,51)" rx="2" ry="2" />
<text  x="460.31" y="79.5" ></text>
</g>
<g >
<title>__rust_dealloc (6,194 samples, 0.08%)</title><rect x="477.3" y="165" width="1.0" height="15.0" fill="rgb(236,89,48)" rx="2" ry="2" />
<text  x="480.33" y="175.5" ></text>
</g>
<g >
<title>do_IRQ (1,602 samples, 0.02%)</title><rect x="457.6" y="149" width="0.3" height="15.0" fill="rgb(228,69,1)" rx="2" ry="2" />
<text  x="460.61" y="159.5" ></text>
</g>
<g >
<title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (69,940 samples, 0.89%)</title><rect x="504.9" y="165" width="10.5" height="15.0" fill="rgb(223,2,33)" rx="2" ry="2" />
<text  x="507.87" y="175.5" ></text>
</g>
<g >
<title>std::collections::hash::map::RandomState::new::KEYS::__getit (23,456 samples, 0.30%)</title><rect x="1120.4" y="181" width="3.5" height="15.0" fill="rgb(215,126,25)" rx="2" ry="2" />
<text  x="1123.40" y="191.5" ></text>
</g>
<g >
<title>tick_sched_handle (968 samples, 0.01%)</title><rect x="457.3" y="85" width="0.2" height="15.0" fill="rgb(248,72,43)" rx="2" ry="2" />
<text  x="460.31" y="95.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (433,533 samples, 5.51%)</title><rect x="1125.0" y="181" width="65.0" height="15.0" fill="rgb(236,62,12)" rx="2" ry="2" />
<text  x="1127.98" y="191.5" >std::co..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1,106 samples, 0.01%)</title><rect x="457.9" y="165" width="0.1" height="15.0" fill="rgb(240,132,39)" rx="2" ry="2" />
<text  x="460.85" y="175.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (452,442 samples, 5.75%)</title><rect x="574.2" y="181" width="67.8" height="15.0" fill="rgb(247,184,14)" rx="2" ry="2" />
<text  x="577.20" y="191.5" >cfree@G..</text>
</g>
<g >
<title>__rust_dealloc (10,841 samples, 0.14%)</title><rect x="569.9" y="181" width="1.7" height="15.0" fill="rgb(222,114,9)" rx="2" ry="2" />
<text  x="572.94" y="191.5" ></text>
</g>
<g >
<title>[unknown] (14,861 samples, 0.19%)</title><rect x="472.6" y="165" width="2.3" height="15.0" fill="rgb(243,113,38)" rx="2" ry="2" />
<text  x="475.64" y="175.5" ></text>
</g>
<g >
<title>[unknown] (1,196 samples, 0.02%)</title><rect x="474.4" y="117" width="0.2" height="15.0" fill="rgb(251,229,5)" rx="2" ry="2" />
<text  x="477.38" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (14,505 samples, 0.18%)</title><rect x="458.0" y="165" width="2.2" height="15.0" fill="rgb(225,168,0)" rx="2" ry="2" />
<text  x="461.02" y="175.5" ></text>
</g>
<g >
<title>[unknown] (14,801 samples, 0.19%)</title><rect x="472.6" y="149" width="2.3" height="15.0" fill="rgb(254,202,47)" rx="2" ry="2" />
<text  x="475.64" y="159.5" ></text>
</g>
<g >
<title>dw_readl (1,041 samples, 0.01%)</title><rect x="457.6" y="37" width="0.2" height="15.0" fill="rgb(218,41,46)" rx="2" ry="2" />
<text  x="460.64" y="47.5" ></text>
</g>
<g >
<title>__rdl_dealloc (10,001 samples, 0.13%)</title><rect x="565.8" y="181" width="1.5" height="15.0" fill="rgb(235,26,37)" rx="2" ry="2" />
<text  x="568.83" y="191.5" ></text>
</g>
<g >
<title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (164,734 samples, 2.09%)</title><rect x="972.5" y="181" width="24.7" height="15.0" fill="rgb(234,48,47)" rx="2" ry="2" />
<text  x="975.52" y="191.5" >c..</text>
</g>
<g >
<title>scheduler_tick (690 samples, 0.01%)</title><rect x="457.4" y="53" width="0.1" height="15.0" fill="rgb(206,11,8)" rx="2" ry="2" />
<text  x="460.35" y="63.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (131,779 samples, 1.67%)</title><rect x="22.1" y="181" width="19.8" height="15.0" fill="rgb(207,211,41)" rx="2" ry="2" />
<text  x="25.14" y="191.5" ></text>
</g>
<g >
<title>__rdl_dealloc (3,808 samples, 0.05%)</title><rect x="476.2" y="165" width="0.6" height="15.0" fill="rgb(233,197,29)" rx="2" ry="2" />
<text  x="479.19" y="175.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (7,072 samples, 0.09%)</title><rect x="1123.9" y="181" width="1.1" height="15.0" fill="rgb(248,122,40)" rx="2" ry="2" />
<text  x="1126.92" y="191.5" ></text>
</g>
<g >
<title>tick_sched_timer (1,065 samples, 0.01%)</title><rect x="457.3" y="101" width="0.2" height="15.0" fill="rgb(242,23,49)" rx="2" ry="2" />
<text  x="460.30" y="111.5" ></text>
</g>
<g >
<title>ret_from_intr (1,616 samples, 0.02%)</title><rect x="457.6" y="165" width="0.3" height="15.0" fill="rgb(233,97,28)" rx="2" ry="2" />
<text  x="460.61" y="175.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (82,968 samples, 1.05%)</title><rect x="460.2" y="165" width="12.4" height="15.0" fill="rgb(221,218,41)" rx="2" ry="2" />
<text  x="463.20" y="175.5" ></text>
</g>
<g >
<title>[unknown] (664,971 samples, 8.45%)</title><rect x="458.0" y="181" width="99.7" height="15.0" fill="rgb(222,153,33)" rx="2" ry="2" />
<text  x="461.02" y="191.5" >[unknown]</text>
</g>
<g >
<title>prepare_exit_to_usermode (1,054 samples, 0.01%)</title><rect x="457.9" y="149" width="0.1" height="15.0" fill="rgb(223,16,31)" rx="2" ry="2" />
<text  x="460.86" y="159.5" ></text>
</g>
<g >
<title>malloc (26,501 samples, 0.34%)</title><rect x="536.4" y="165" width="3.9" height="15.0" fill="rgb(218,166,32)" rx="2" ry="2" />
<text  x="539.36" y="175.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (878 samples, 0.01%)</title><rect x="936.4" y="165" width="0.2" height="15.0" fill="rgb(223,204,16)" rx="2" ry="2" />
<text  x="939.45" y="175.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (116,078 samples, 1.48%)</title><rect x="540.3" y="165" width="17.4" height="15.0" fill="rgb(250,223,9)" rx="2" ry="2" />
<text  x="543.34" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (709 samples, 0.01%)</title><rect x="474.4" y="101" width="0.1" height="15.0" fill="rgb(250,13,23)" rx="2" ry="2" />
<text  x="477.42" y="111.5" ></text>
</g>
<g >
<title>[unknown] (14,499 samples, 0.18%)</title><rect x="472.7" y="133" width="2.2" height="15.0" fill="rgb(240,75,26)" rx="2" ry="2" />
<text  x="475.68" y="143.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17,513 samples, 0.22%)</title><rect x="571.6" y="181" width="2.6" height="15.0" fill="rgb(238,64,20)" rx="2" ry="2" />
<text  x="574.57" y="191.5" ></text>
</g>
<g >
<title>computing_proje (7,868,396 samples, 100.00%)</title><rect x="10.0" y="197" width="1180.0" height="15.0" fill="rgb(207,155,3)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >computing_proje</text>
</g>
<g >
<title>all (7,868,402 samples, 100%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(211,182,40)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (56,445 samples, 0.72%)</title><rect x="526.3" y="165" width="8.5" height="15.0" fill="rgb(209,187,36)" rx="2" ry="2" />
<text  x="529.33" y="175.5" ></text>
</g>
<g >
<title>__rdl_alloc (8,667 samples, 0.11%)</title><rect x="474.9" y="165" width="1.3" height="15.0" fill="rgb(230,175,30)" rx="2" ry="2" />
<text  x="477.89" y="175.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (11,336 samples, 0.14%)</title><rect x="472.7" y="117" width="1.7" height="15.0" fill="rgb(227,153,32)" rx="2" ry="2" />
<text  x="475.68" y="127.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (803 samples, 0.01%)</title><rect x="936.5" y="149" width="0.1" height="15.0" fill="rgb(223,182,46)" rx="2" ry="2" />
<text  x="939.46" y="159.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1,426 samples, 0.02%)</title><rect x="457.2" y="117" width="0.3" height="15.0" fill="rgb(220,1,39)" rx="2" ry="2" />
<text  x="460.24" y="127.5" ></text>
</g>
<g >
<title>computing_project::ds_helper::possible_periods_search (120,713 samples, 1.53%)</title><rect x="486.8" y="165" width="18.1" height="15.0" fill="rgb(238,75,36)" rx="2" ry="2" />
<text  x="489.76" y="175.5" ></text>
</g>
<g >
<title>computing_project::util::Polynomial::multiplier (238,675 samples, 3.03%)</title><rect x="936.7" y="181" width="35.8" height="15.0" fill="rgb(239,107,15)" rx="2" ry="2" />
<text  x="939.73" y="191.5" >com..</text>
</g>
<g >
<title>computing_project::ds_helper::possible_periods_search (559,931 samples, 7.12%)</title><rect x="709.1" y="181" width="84.0" height="15.0" fill="rgb(236,9,46)" rx="2" ry="2" />
<text  x="712.09" y="191.5" >computing..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (97,149 samples, 1.23%)</title><rect x="1051.1" y="181" width="14.6" height="15.0" fill="rgb(219,161,25)" rx="2" ry="2" />
<text  x="1054.14" y="191.5" ></text>
</g>
<g >
<title>malloc (364,719 samples, 4.64%)</title><rect x="1065.7" y="181" width="54.7" height="15.0" fill="rgb(251,171,51)" rx="2" ry="2" />
<text  x="1068.71" y="191.5" >malloc</text>
</g>
</g>
</svg>
